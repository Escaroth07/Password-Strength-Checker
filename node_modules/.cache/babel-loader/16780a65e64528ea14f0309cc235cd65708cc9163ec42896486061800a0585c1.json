{"ast":null,"code":"export async function scorePassword(pw, dict = [], personalInfo = [], breachChecker = null) {\n  function hasUpper(str) {\n    return /[A-Z]/.test(str);\n  }\n  function hasLower(str) {\n    return /[a-z]/.test(str);\n  }\n  function hasNumber(str) {\n    return /\\d/.test(str);\n  }\n  function hasSymbol(str) {\n    return /[!@#$%^&*()_\\-+=\\[\\]{}|;:'\",.<>?/\\\\]/.test(str);\n  }\n  function isCommonPattern(str) {\n    return /qwerty|123456|password|asdfgh/i.test(str);\n  }\n  function containsDictionaryWord(str, dict) {\n    let lower = str.toLowerCase();\n    return dict.some(word => lower.includes(word));\n  }\n  function calcEntropy(pw) {\n    let setSize = 0;\n    if (hasLower(pw)) setSize += 26;\n    if (hasUpper(pw)) setSize += 26;\n    if (hasNumber(pw)) setSize += 10;\n    if (hasSymbol(pw)) setSize += 32;\n    return pw.length * Math.log2(setSize || 1);\n  }\n  function personalInfoCheck(pw, personalInfo) {\n    for (let info of personalInfo) {\n      if (info && pw.toLowerCase().includes(info.toLowerCase())) return true;\n    }\n    return false;\n  }\n  let score = 0,\n    feedback = [];\n  // Length\n  if (pw.length >= 15) score += 3;else if (pw.length >= 12) score += 2;else if (pw.length >= 8) score += 1;else feedback.push(\"Use at least 8 characters (15+ is best)\");\n  // Diversity\n  let diversity = 0;\n  if (hasLower(pw)) diversity++;\n  if (hasUpper(pw)) diversity++;\n  if (hasNumber(pw)) diversity++;\n  if (hasSymbol(pw)) diversity++;\n  if (diversity === 1) feedback.push(\"Mix uppercase, lowercase, numbers, symbols\");\n  score += diversity;\n  // Entropy\n  let entropy = calcEntropy(pw);\n  if (entropy > 60) score += 2;else if (entropy > 40) score += 1;\n  // Patterns\n  if (isCommonPattern(pw)) {\n    feedback.push(\"Avoid common patterns\");\n    score -= 2;\n  }\n  // Dictionary\n  if (containsDictionaryWord(pw, dict)) {\n    feedback.push(\"Avoid common words\");\n    score -= 2;\n  }\n  // Personal info\n  if (personalInfoCheck(pw, personalInfo)) {\n    feedback.push(\"Don't use personal info\");\n    score -= 2;\n  }\n  // Breach check\n  let breached = false;\n  if (breachChecker) {\n    breached = await breachChecker(pw);\n    if (breached) {\n      feedback.push(\"This password appears in a breach—do not use it!\");\n      score = 0;\n    }\n  }\n  score = Math.max(0, Math.min(score, 8));\n  let levels = [\"Very Weak\", \"Weak\", \"Fair\", \"Good\", \"Strong\", \"Very Strong\", \"Excellent\", \"Unbreakable\"];\n  return {\n    score,\n    strength: levels[score],\n    entropy: entropy.toFixed(1),\n    feedback,\n    breached\n  };\n}","map":{"version":3,"names":["scorePassword","pw","dict","personalInfo","breachChecker","hasUpper","str","test","hasLower","hasNumber","hasSymbol","isCommonPattern","containsDictionaryWord","lower","toLowerCase","some","word","includes","calcEntropy","setSize","length","Math","log2","personalInfoCheck","info","score","feedback","push","diversity","entropy","breached","max","min","levels","strength","toFixed"],"sources":["F:/Projects/password-strength-checker/src/utils/passwordScoring.js"],"sourcesContent":["export async function scorePassword(pw, dict = [], personalInfo = [], breachChecker = null) {\r\n    function hasUpper(str) { return /[A-Z]/.test(str); }\r\n    function hasLower(str) { return /[a-z]/.test(str); }\r\n    function hasNumber(str) { return /\\d/.test(str); }\r\n    function hasSymbol(str) { return /[!@#$%^&*()_\\-+=\\[\\]{}|;:'\",.<>?/\\\\]/.test(str); }\r\n    function isCommonPattern(str) { return /qwerty|123456|password|asdfgh/i.test(str); }\r\n    function containsDictionaryWord(str, dict) {\r\n        let lower = str.toLowerCase();\r\n        return dict.some(word => lower.includes(word));\r\n    }\r\n    function calcEntropy(pw) {\r\n        let setSize = 0;\r\n        if (hasLower(pw)) setSize += 26;\r\n        if (hasUpper(pw)) setSize += 26;\r\n        if (hasNumber(pw)) setSize += 10;\r\n        if (hasSymbol(pw)) setSize += 32;\r\n        return pw.length * Math.log2(setSize || 1);\r\n    }\r\n    function personalInfoCheck(pw, personalInfo) {\r\n        for (let info of personalInfo) {\r\n            if (info && pw.toLowerCase().includes(info.toLowerCase())) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    let score = 0, feedback = [];\r\n    // Length\r\n    if (pw.length >= 15) score += 3;\r\n    else if (pw.length >= 12) score += 2;\r\n    else if (pw.length >= 8) score += 1;\r\n    else feedback.push(\"Use at least 8 characters (15+ is best)\");\r\n    // Diversity\r\n    let diversity = 0;\r\n    if (hasLower(pw)) diversity++;\r\n    if (hasUpper(pw)) diversity++;\r\n    if (hasNumber(pw)) diversity++;\r\n    if (hasSymbol(pw)) diversity++;\r\n    if (diversity === 1) feedback.push(\"Mix uppercase, lowercase, numbers, symbols\");\r\n    score += diversity;\r\n    // Entropy\r\n    let entropy = calcEntropy(pw);\r\n    if (entropy > 60) score += 2;\r\n    else if (entropy > 40) score += 1;\r\n    // Patterns\r\n    if (isCommonPattern(pw)) {\r\n        feedback.push(\"Avoid common patterns\");\r\n        score -= 2;\r\n    }\r\n    // Dictionary\r\n    if (containsDictionaryWord(pw, dict)) {\r\n        feedback.push(\"Avoid common words\");\r\n        score -= 2;\r\n    }\r\n    // Personal info\r\n    if (personalInfoCheck(pw, personalInfo)) {\r\n        feedback.push(\"Don't use personal info\");\r\n        score -= 2;\r\n    }\r\n    // Breach check\r\n    let breached = false;\r\n    if (breachChecker) {\r\n        breached = await breachChecker(pw);\r\n        if (breached) {\r\n            feedback.push(\"This password appears in a breach—do not use it!\");\r\n            score = 0;\r\n        }\r\n    }\r\n    score = Math.max(0, Math.min(score, 8));\r\n    let levels = [\r\n        \"Very Weak\", \"Weak\", \"Fair\", \"Good\", \"Strong\", \"Very Strong\", \"Excellent\", \"Unbreakable\"\r\n    ];\r\n    return {\r\n        score,\r\n        strength: levels[score],\r\n        entropy: entropy.toFixed(1),\r\n        feedback,\r\n        breached\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}